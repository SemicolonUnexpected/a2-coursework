using System.ComponentModel;

namespace a2_coursework.CustomControls; 
public partial class DateInput {
    public string DayText => tbDay.Text;

    public string MonthText => tbMonth.Text;
    public string YearText => tbYear.Text;
    public int? Day {
        get {
            if(int.TryParse(tbDay.Text, out int day)) return day;
            else return null;
        }
        set {
            if (value is null) tbDay.Text = "";
            else if (value < 0) throw new ArgumentOutOfRangeException("value");
            else if (value < 10) tbDay.Text = "0" + value.ToString();
            else tbDay.Text = value.ToString() ?? "";
        }
    }

    public int? Month {
        get {
            if(int.TryParse(tbMonth.Text, out int month)) return month;
            else return null;
        }
        set {
            if (value is null) tbMonth.Text = "";
            else if (value < 0) throw new ArgumentOutOfRangeException("value");
            else if (value < 10) tbMonth.Text = "0" + value.ToString();
            else tbMonth.Text = value.ToString() ?? "";
        }
    }
    
    public int? Day {
        get {
            if(int.TryParse(tbDay.Text, out int day)) return day;
            else return null;
        }
        set {
            if (value is null) tbDay.Text = "";
            else if (value < 0) throw new ArgumentOutOfRangeException("value");
            else if (value < 10) tbDay.Text = "0" + value.ToString();
            else tbDay.Text = value.ToString() ?? "";
        }
    }


    private Color _backColor = Color.FromArgb(9, 9, 10);
    [Category("Appearance")]
    [TypeConverter(typeof(ColorConverter))]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [DefaultValue(typeof(Color), "9, 9, 10")]
    public new Color BackColor {
        get => _backColor;
        set {
            _backColor = value;

            base.BackColor = value;

            tbDay.BackColor = value;
            tbMonth.BackColor = value;
            tbYear.BackColor = value;

            lblDay.BackColor = value;
            lblMonth.BackColor = value;
            lblYear.BackColor = value;
        }
    }

    private Color _foreColor = Color.White;
    [Category("Appearance")]
    [TypeConverter(typeof(ColorConverter))]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [DefaultValue(typeof(Color), "255, 255, 255")]
    public new Color ForeColor {
        get => _foreColor;
        set {
            _foreColor = value;

            base.ForeColor = value;

            tbDay.ForeColor = value;
            tbMonth.ForeColor = value;
            tbYear.ForeColor = value;

            lblDay.ForeColor = value;
            lblMonth.ForeColor = value;
            lblYear.ForeColor = value;

            MessageBox.Show("Test");
        }
    }

    public Color PlaceholderTextColor {
        get => tbDay.PlaceholderTextColor;
        set {
            tbDay.PlaceholderTextColor = value;
            tbMonth.PlaceholderTextColor = value;
            tbYear.PlaceholderTextColor = value;
        }
    }

    private Color _borderColor;
    [Category("Appearance")]
    public Color BorderColor {
        get => _borderColor;
        set {
            _borderColor = value;

            MessageBox.Show(ErrorState.ToString());
            if (ErrorState == DateErrorState.None) {
                tbDay.BorderColor = value;
                tbMonth.BorderColor = value;
                tbYear.BorderColor = value;
            }
        }
    }

    private Color _borderErrorColor = Color.Red;
    [Category("Appearance")]
    public Color BorderErrorColor {
        get => _borderErrorColor;
        set {
            _borderErrorColor = value;

            if (ErrorState == DateErrorState.Incomplete) {
                if (string.IsNullOrEmpty(tbDay.Text)) tbDay.BorderColor = _borderErrorColor;
                if (string.IsNullOrEmpty(tbMonth.Text)) tbMonth.BorderColor = _borderErrorColor;
                if (string.IsNullOrEmpty(tbYear.Text)) tbYear.BorderColor = _borderErrorColor;
            }
            else if (ErrorState == DateErrorState.Invalid) {
                tbDay.BorderColor = _borderErrorColor;
                tbMonth.BorderColor = _borderErrorColor;
                tbYear.BorderColor = _borderErrorColor;
            }
        }
    }

    private float _borderThickness = 1;
    [Category("Appearance")]
    public float BorderThickness {
        get => _borderThickness;
        set {
            _borderThickness = value;

            tbDay.BorderThickness = value;
            tbMonth.BorderThickness = value;
            tbYear.BorderThickness = value;
        }
    }

    public event EventHandler? DateChanged;
    [DefaultValue(null)]
    public DateTime? Date {
        get {
            try {
                // Parse and validate the date
                int day = int.Parse(tbDay.Text);
                int month = int.Parse(tbMonth.Text);
                int year = int.Parse(tbYear.Text);

                // Attempt to create a DateTime object
                DateTime date = new(year, month, day);

                return date;
            }
            catch {
                return null;
            }
        }
        set {
            if (value is not null) {
                tbDay.Text = value.Value.Day.ToString();
                tbMonth.Text = value.Value.Month.ToString();
                tbYear.Text = value.Value.Year.ToString();
            }
            else {
                tbDay.Text = "";
                tbMonth.Text = "";
                tbYear.Text = "";
            }

            DateChanged?.Invoke(this, EventArgs.Empty);
        }
    }

    private DateErrorState _errorState = DateErrorState.None;
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public DateErrorState ErrorState {
        get => _errorState;
        private set => _errorState = value;
    }

    public enum DateErrorState { None, Incomplete, Invalid }
}
